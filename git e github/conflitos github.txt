# Resolvendo conflitos em Git

Dec 24, 2021 ‚Ä¢ Reading time ~6 minutes

Resolver conflitos pode ser uma tarefa √°rdua e complicada quando se trata de projetos git. Nesse artigo voc√™ vai aprender um passo-a-passo infal√≠vel para resolver conflitos.

Caso voc√™ j√° saiba o que s√£o conflitos e queira apenas ver a lista de passos e comandos para resolver um conflito sugiro que [pule para a conclus√£o clicando aqui](https://jtemporal.com/resolvendo-conflitos/#conclusao).

## O que √© um conflito em git

Quando um projeto tem v√°rias pessoas trabalhando ao mesmo tempo, √© poss√≠vel que duas pessoas precisem fazer altera√ß√µes no mesmo peda√ßo de um arquivo. Quando mais de uma pessoa altera o mesmo peda√ßo de um arquivo em branches diferentes √© nesse momento que os conflitos aparecem.

O conflito simboliza que duas ou mais altera√ß√µes aconteceram no mesmo peda√ßo de um arquivo e o git n√£o sabe qual das altera√ß√µes manter.

## Como um conflito se forma

Na imagem abaixo temos um diagrama que eu carinhosamente apelidei de ‚Äúanatomia de um conflito‚Äù que mostra os passos at√© que um conflito se forme. Vale salientar que normalmente, durante o ciclo de desenvolvimento de projetos, as altera√ß√µes s√£o maiores a por vezes em maior quantidade.

![anatomia de um conflito](https://res.cloudinary.com/jesstemporal/image/upload/v1640379728/anatomia-de-um-conflito_ixpolc.png)

**0 -** No nosso projeto temos um `README.md` que foi adicionado pelo commit inicial no reposit√≥rio. Depois da cria√ß√£o desse arquivo, duas altera√ß√µes precisam ser feitas para adicionar mais algumas informa√ß√µes ao mesmo arquivo e duas pessoas v√£o fazer essa altera√ß√£o;

**1 -** Cada pessoa ent√£o criou um branch a partir da `main` para trabalhar nas suas altera√ß√µes, esses novos branches foram criados mais ou menos ao mesmo tempo, ou seja, eles possuem um mesmo ponto de partida;

**2 -** Durante algum tempo cada pessoa trabalha na sua branch implementando a sua altera√ß√£o, que nesse caso √© adicionar a linha *‚Äúpessoa x esteve aqui!‚Äù* no arquivo de `README.md` sendo x o identificador da pessoa;

**3 -** A pessoa 1 faz um pull request e tem esse pull request aprovado e seu merge na `main`;

**4 -** A pessoa 2 por sua vez, faz o seu pull request para `main`, s√≥ que esse pull request **n√£o** pode ser feito merge pois apresenta conflitos.

## Formando um conflito na pr√°tica

Para demonstrar como isso se apresenta, eu criei um reposit√≥rio com um cen√°rio parecido ao descrito na se√ß√£o anterior [que voc√™ pode encontrar aqui](https://github.com/jtemporal/exemplo-conflito/branches). O arquivo inicial foi criado e as duas branches, uma para cada pessoa, tamb√©m j√° foram criadas a partir da `main`, veja:

![imagem mostrando o estado inicial do reposit√≥rio como descrito anteriormente](https://res.cloudinary.com/jesstemporal/image/upload/v1640385396/resolucao-de-conflito-git/resolucao-de-conflito-fig-1_h7tkoc.png)

Em seguida fiz as altera√ß√µes para cada pessoa, no branch `pessoa1` adicionei a descri√ß√£o *‚ÄúPessoa 1 esteve aqui!‚Äù* na √∫ltima linha do `README.md` e de forma similar fiz o mesmo processo para o branch `pessoa2`. Ent√£o, abri os dois pull requests:

![imagem mostrando os dois pull requests abertos no github](https://res.cloudinary.com/jesstemporal/image/upload/v1640385398/resolucao-de-conflito-git/resolucao-de-conflito-fig-2_bqyfl6.png)

Revisei e dei o merge no pull request da `pessoa1`:

![imagem mostrando o pull request feito merge](https://res.cloudinary.com/jesstemporal/image/upload/v1640385397/resolucao-de-conflito-git/resolucao-de-conflito-fig-3_oy9bss.png)

E ent√£o voltei para o PR da `pessoa2` e pude notar a indica√ß√£o de que o pull request continha um conflito, veja:

![imagem mostrando o pull request de pessoa 2 com a mensagem de conflito do github](https://res.cloudinary.com/jesstemporal/image/upload/v1640385397/resolucao-de-conflito-git/resolucao-de-conflito-fig-4_c55lad.png)

E agora com o conflito quentinho em m√£os √© hora de resolv√™-lo.

## Resolvendo um conflito no Git

Antes de come√ßar √© importante notar que este tipo de conflito √© poss√≠vel resolver tamb√©m pela interface do GitHub, mas o foco aqui s√£o os comandos, ent√£o vamos l√°!

A primeira coisa importante √© decidir em qual branch resolver o conflito, uma regra que geralmente funciona √© resolver os conflitos no branch que apresenta as altera√ß√µes, neste caso, o branch em quest√£o √© o `pessoa2`, com isso voc√™ deve atualizar o seu reposit√≥rio local, e este branch em particular com os ajustes da main, para isso fa√ßa:

```
git checkout pessoa2
git pull origin main
```

Isso ir√° trazer o conflito para a sua m√°quina te dando um aviso informando que existem conflitos, que voc√™ deve resolver o conflito e fazer um commit com o resultado:

![resultado do comando git pull com conflito](https://res.cloudinary.com/jesstemporal/image/upload/v1640385397/resolucao-de-conflito-git/resolucao-de-conflito-fig-5_xjzs8d.png)

Se voc√™ abrir o `README.md` num editor de c√≥digo ir√° notar a presen√ßa de marcadores indicado por sucessivos sinais de maior que (`>`), sinais de menor que (`>`) e sinais de igual (`=`), aqui um exemplo do conflito mostrado no Vim:

![imagem mostrando o conflito no editor vim com as marca√ß√µes mais simples](https://res.cloudinary.com/jesstemporal/image/upload/v1640385398/resolucao-de-conflito-git/resolucao-de-conflito-fig-6_zqutjm.png)

Tamb√©m √© poss√≠vel que voc√™ use o VS Code que mostra o conflito de uma forma mais amig√°vel j√° que ele marca visualmente, com cores diferentes, cada mudan√ßa de origem diferente e ainda te d‚Äôa‚Äô op√ß√µes de como resolver o conflito aceitando parte das mudan√ßas, ou as duas, ou nenhuma delas:

![imagem mostrando o conflito no editor VS Code com as marca√ß√µes mais bem definidas](https://res.cloudinary.com/jesstemporal/image/upload/v1640385397/resolucao-de-conflito-git/resolucao-de-conflito-fig-7_wesv8q.png)

Para entender o que cada bot√£o apresentado pelo VS Code quer dizer, vamos dissecar um pouco esse formato de representa√ß√£o. Um conflito pode ser dividido em duas partes:

1. **As nossas altera√ß√µes:** aquelas que est√£o no branch corrente tamb√©m chamadas de altera√ß√µes atuais (*current change*);
2. **As altera√ß√µes dos outros:** aquelas que trouxemos para a m√°quina local ao fazer `git pull` tamb√©m chamadas de altera√ß√µes que est√£o chegando ou de entrada (*incoming changes*).

Nesse formato, cada bloco √© delimitado por um sinal de maior ou menor at√© o bloco de sinais de igual repetidos, ent√£o por exemplo nesse caso temos os seguintes blocos.

Aquele com as altera√ß√µes atuais:

```
<<<<<<< HEAD
Pessoa 2 esteve aqui!
=======
```

E aquele com as altera√ß√µes que est√£o chegando:

```
=======
Pessoa 1 esteve aqui!
>>>>>>> 3c20251a794ec572e2c3202017d843e2d8769843
```

Como queremos deixar ambas altera√ß√µes, podemos apenas apagar as linhas com os marcadores salvar o arquivo, se voc√™ estiver usando editores mais simples. No VS Code podemos apertar em *‚ÄúAccept both changes‚Äù* e continuar com os comandos a seguir. Ap√≥s aceitar todas as mudan√ßas, manualmente ou usando os bot√µes no VS Code, voc√™ deve ter um arquivo assim:

![imagem mostrando o resultado esperado de aceitar ambos blocos de altera√ß√µes](https://res.cloudinary.com/jesstemporal/image/upload/v1640385397/resolucao-de-conflito-git/resolucao-de-conflito-fig-8_ps9lz7.png)

Lembre-se de salvar o arquivo. Em seguida volte para o terminal, se voc√™ rodar o comando `git status` vai ver que o arquivo `README.md` se mostra com altera√ß√µes.

![imagem mostrando resultado do comando git status com o arquivo readme.md apresentando altera√ß√µes](https://res.cloudinary.com/jesstemporal/image/upload/v1640386495/resolucao-de-conflito-git/resolucao-de-conflito-fig-9_qos2xt.png)

Agora voc√™ pode adicionar esse arquivo em staging com o seguinte comando:

```
git add README.md
```

E fazer o commit das altera√ß√µes da forma que preferir. Note que ao fazer o commit, se voc√™ usar editores para escrever a mensagem de commit, √© poss√≠vel que essa mensagem j√° venha pr√©-preenchida como na imagem abaixo:

![imagem mostrando a mensagem de commit pr√©-preenchida pelo editor vim](https://res.cloudinary.com/jesstemporal/image/upload/v1640387040/resolucao-de-conflito-git/resolucao-de-conflito-fig-10_urteae.png)

Voc√™ pode personalizar a mensagem ou deix√°-la como est√° e, ao terminar de fazer o commit, enviar essas altera√ß√µes para o GitHub com um `git push`:

![imagem mostrando o envio das altera√ß√µes para o github](https://res.cloudinary.com/jesstemporal/image/upload/v1640387040/resolucao-de-conflito-git/resolucao-de-conflito-fig-11_kumo0k.png)

Agora se voc√™ recarregar a p√°gina do pull request dever√° ver que o conflito foi resolvido, observe:

![Imagem mostrando o PR que antes apresentava conflito agora com o conflito resolvido](https://res.cloudinary.com/jesstemporal/image/upload/v1640387041/resolucao-de-conflito-git/resolucao-de-conflito-fig-12_nourxm.png)

E podemos finalmente dar merge neste pull request! Vit√≥ria! üéâüéâ

## Conclus√£o

Voc√™ agora entende como os conflitos se formam e tamb√©m sabe todos os passos envolvidos em resolver conflitos.

Aqui est√° a lista simples de todos os comandos e passos para resolver conflitos, lembre de substituir as nota√ß√µes `<>` de acordo:

1. `git checkout <nome do branch com conflito>`

2. `git pull origin main`

3. abra o arquivo com conflito e os resolva

4. salve o arquivo

5. `git add <nome do arquivo alterado>`

6. `git commit`

7. `git push`

   para mais informa√ß√£o [site fonte]:([Resolvendo conflitos em Git | Jessica Temporal (jtemporal.com)](https://jtemporal.com/resolvendo-conflitos/#:~:text=O que √© um conflito em git Quando,diferentes √© nesse momento que os conflitos aparecem.))